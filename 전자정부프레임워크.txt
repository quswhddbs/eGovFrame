
-Part1 표준프레임워크 구조와 개발 환경  **********************************************

-CHAPTER 01 표준프레임워크 개요
-Section1. 프레임워크 개요
-Section2. 표준프레임워크 개념
-Section3. 표준프레임워크 구성
-3.1. 개발 환경
-3.2. 실행 환경
-3.3. 운영 환경
-3.4. 관리 환경
-Section4. 표준프레임워크 적용 방안 및 사례

-CHAPTER 02 표준프레임워크 개발 환경
-Section1. 표준프레임워크 개발 환경
-Section2. 개발 환경 구축
-2.1. 개발자 통합 개발 환경 설치
-2.2. 개발자 경량 개발 환경 설치
-2.3. 개발 환경 구조
-2.4. 서버 개발 환경 구축
-2.5. VisualSVN Server 설치 및 설정
-2.6. 오라클 설치 및 설정
이클립스에서 open Perspective 선택해서 eGovFrame 선택변경 
Data Source Explorer 선택 -> Database Connections 선택 -> 우클릭 -> New
이름 , JAR 위치(ex)C:\app\JYP\product\11.2.0\dbhome_1\jdbc\lib\ojdbc6.jar , 
jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl / system / 1111 
새로운 웹 프로젝트 만들고 SQL 테스트 file -> new -> dynamic web project 
web_test 프로젝트 생성후 webContent 에 test.sql 파일을 만들어 준다. 
sql 문을 테스트 해본다. 

-Section3. 구현 도구
-3.1. 에디터 설정
-3.2. 플러그인 업데이트
help -> install new softwere.. 
add -> http://www.egovframe.org/update (웬만하면 업데이트 하지않고 사용)

-3.3. 프로젝트 생성과 메뉴
eGovFrame 탭을 클릭해서 ERD 다이어드램 등을 생성할수 있다.
-3.4. 표준프레임워크 웹 프로젝트 실습
file -> new -> eGovFrame web project -> sample source 체크 -> egov_web 생성 
생성된 프로젝트 우클릭 -> run as -> maven install 
server start 해보면 sample 게시판을 볼수 있다. 

-CHAPTER 03 표준프레임워크 테스트 도구
-Section1. 테스트 도구
-1.1. JUnit 개념
-Section2. JUnit 개념
-2.1. JUnit 라이브러리 사용
-Section3. JUnit 테스트 케이스 작성
-3.1. 테스트 케이스 작성
new -> java project -> junit_test 로 생성 
libraries 에서 Add librari.. 를 통해 자동으로 라이브러리를 추가할수 있다. 
com.rubypaper.junit 패키지 생성 
MyStack.java 추가
MyVector.java 추가
프로젝트 우클릭 -> new -> source folder -> testSrc 로 생성
동일하게 패키지 생성 후  JUnit Test Case 생성
MyvetorTest 이름으로생성 , 밑에 Browse.. 클릭 후 MyVector 검색 후 클릭 -> next -> 테스트할 메서드 선택후 완료
하나의 테스트 클래스에서 패키지 (두개 이상)을 한번에 테스트하고 싶으면 , Test Suite 를 만들어 테스트 가능하다. 
기존에 만들었던 프로젝트 우클릭 -> pmd -> check code 클릭 

-3.2. 테스트 스위트 작성
-Section4. 정적 테스트와 코드 리뷰 - 코드 인스펙션
-Section5. PMD 개념
-Section6. PMD 실습
-6.1. 이클립스 PMD 플러그인
window -> preferences -> PMD -> Rule Configuration 메뉴선택하고 Use global rule .. 체크박스 체크하면 사용 가능한 Active rule 377개 나옴
-6.2. 표준프레임워크 PMD 룰셋 적용
window -> preferences -> PMD -> Rule Configuration 메뉴선택하고 Use global rule .. 체크 , 밑에 모든 Rule 체크 후 삭제 
import rule set 해서 다운받은 
(https://www.egovframe.go.kr/wiki/lib/exe/fetch.php?media=egovframework:dev3.5:imp:egovinspectiomrules-3.5.zip)
모두 포함해 주고 OK 버튼 클릭 
preferences -> pmd -> reports 선택 , 원하는 파일 형식 지정 , html,text,xml 선택하고 ok 클릭 
프로젝트에서 우클릭 PMD -> check code 하면 프로젝트에 대해서 검사결과가 나온다. 

-Section7. 파인드벅스 개념
-Section8. 파인드벅스 실습
preferences -> java -> FindBugs 메뉴 Reporter configuration 탭에서 9가지 카테고리를 선택 혹은 해제할 수 있다.
4가지 등급은 각각 Error, Warning, Info 중에서 선택 가능하다.
PMD 와 마찬가지로 확인하고 싶은 프로젝트의 우클릭 후 find Bugs 를 통해 코드를 검사할 수 있다.

-CHAPTER 04 자동화 빌드 도구 메이븐
-Section1. 빌드 개념
-Section2. 메이븐 개념
-Section3. 메이븐 특징
-3.1. 플러그인과 골
-3.2. 라이프 사이클
-3.3. 코디네이트
-3.4. 저장소
-3.5. 디펜던시 관리
-3.6. pom.xml 파일 구조
-Section4. 메이븐 프로젝트
-4.1. 메이븐 프로젝트
메이븐 프로젝트는 두가지 방식으로 생성가능하다. 
1.개발환경에서 제공하는 eGovFrame Perspective를 이용한 생성
2.메이븐 아키타입 플러그인 이용한 생성 

-4.2. 메이븐 프로젝트 생성
new -> other -> maver -> maven product 
maven-archetype-quickstart 1.1 선택 
rus as -> maven build -> [Goals]에 exec:java -Dexec.mainClass=com.rubypaper.maven.maven_test.App -> Run
실행을 위해 사용한 플러그인은 모조(mojo) 프로젝트의 exec 플러그인이다. exec 플러그인은 자바 클래스와 다른 스크립트를 실행할 수 있다.
exec 플러그인의 접두어는 exec 이고 , 골은 java 가 되는 것이다. -D 옵션을 통해 실행하고자 하는 메인 클래스를 매개변수로 전달한다. 
maven install 실행해보자 -> run as -> maven install -> 빌드가 성공하면 target 아래에 jar 파일이 생성된다.

-Section5. 메이븐 웹 애플리케이션
메이븐 웹 애플리케이션 생성하고, 톰캣 메이븐 플러그인을 사용하여 톰캣 서버에 배포하는 방법을 알아보자. 실무에서 가장 활용도가 높은 플러그인이다.

-5.1. 톰캣 매니저 디플로이어 사용
톰캣 서버의 매니저라는 디플로이어를 사용하도록 설정해야한다. (췝 브라우저를 통해 서버에 웹 애플리케이션을 쉽게 배포 할 수 있는 배포 관리자)
이클립스에 추가한 server -> tomcat-users.xml 파일을 열어 아래와 같이 추가 
역할과 유저를 등록하는 부분이다. rolename 은 정해져 있는 값들인데 . manager를 웹 화면에서 사용하기 위한 역할과 메이븐 등의 스크립트에서 접근 하기 위한 역할 등을 의미 
롤은 tomcat, manager-gui, manager-script, admin-gui 4가지 등록 
user의 username 과 password는 자유롭게 설정가능
-내용(tomcat-users.xml)
<role rolename="tomcat"/>
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="admin-gui"/>
  <user username="quswhddbs" password="quswhddbs" roles="tomcat,manager-gui,manager-script,admin-gui"/>
-내용(server.xml) 
<Host> // host 사이에 넣어야 한다. 
  <Context path="/manager" privileged="true" docBase="${catalina.home}/webapps/manager"/>
</Host> 
http://localhost:8080/manager 를 해보면 서버의 디플로이어를 사용할 수 있게 되었다. 

-5.2. 메이븐 웹 애플리케이션
new -> other -> maven -> maven project -> Artifact Id 는 maven-archetype-webapp 를 선택하여 웹 애플리케이션 생성
group id : com.rubypaper.maven , artifact id : maven_web , package : com.rubypaper.maven.maven_web

-5.3. 메이븐 톰캣 플러그인 설정
우클릭 -> maven -> add plugin 
group id : org.apache.tomcat.maven , artifact id : tomcat7-maven-plugin , version : 2.2
이렇게 하면 pom.xml 에 톰캣 플러그인이 추가된 것을 볼 수 있다. 아래의 부분도 추가해 준다. 
<groupId>org.apache.tomcat.maven</groupId>
    		<artifactId>tomcat7-maven-plugin</artifactId>
    		<version>2.2</version>
    		<configuration>
    			<url>http://localhost:8080/manager/text</url>
    			<username>quswhddbs</username>
    			<password>quswhddbs</password>
				<path>/maven_web</path>
    		</configuration>
서버를 시작한 후에 -> Run as -> maven build... 수행 -> goal 은 tomcat7:deploy 를 입력 후 console 에서 BUILD SUCCESS 확인한다. 
C:\Users\JYP\Desktop\program\eGovFrameDev-3.7.0-64bit\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\webapps 에 maven_web.war 배포확인 할 수 있다.
http://localhost:8080/maven_web/ 을 입력해보면 결과를 볼 수 있다.
계속해서 tomcat7:undeploy 나 tomcat7:redeploy 등을 수행해보면 , 배포된 디렉터리의 변화등을 볼 수 있다. 
tomcat7:undeploy : 삭제 
tomcat7:redeploy : 동일한 이름의 애플리케이션 있어도 재배포 
웹 애플리케이션 제작하고나면 실제 웹 서버에 배포한 후 , 클라이언트 브라우저에서 접속이 가능하다. 
플러그인 configuration 정보를 실제 연결하고자 하는 웹 서버의 주소와 사용자 이름,패스등을 입력한다.  ex ) 
<configuration>
	<url>http://실제운영주소/manager/text</url>
	<username>user</username>
	<password>pass</password>
	<path>/maven_web</path>
</configuration>
* 현제 tomcat 에 설정한 부분을 운영서버에 똑같이 설정한 후 local에서 개발 후 위와같은 과정을 거치면 , 자동으로 운영에 배포가 되는것이다.
테스트 시 이클립스에서 컴파일하고 실행시키는 것이 아니므로 에러는 상관없지만 , 에러를 업애려면 , 프로젝트 우클릭 -> properties -> target Runtime -> Apach tomcat 의 맞는 버전체크 하면 된다.

-Section6. 메이븐 디펜던시 설정
-CHAPTER 05 버전관리 도구와 지속적 통합S VN, Hudson
-Section1. 버전관리 도구
-Section2. SVN(Subversion: 서브버전) 이해
-Section3. TortoiseSVN, Subversive
-3.1. SVN 서버와 SVN 클라이언트
-3.2. TortoiseSVN 사용
-3.3. 이클립스 Subversive 플러그인 사용
-Section4. SVN 사용
-Section5. 지속적 통합 - CI 도구
-Section6. 허드슨
-6.1. 허드슨 개념
-6.2. 허드슨 작업 정의
-6.3. 버전관리 도구 연계
-6.4. 허드슨 설치
-Section7. 허드슨 사용
-7.1. 새 작업과 빌드 스케줄 정의
-7.2. 빌드 수행
-7.3. 허드슨 작업 공간


-Part2 표준프레임워크 실행 환경 **********************************************


-CHAPTER 01 표준프레임워크 실행 환경 이해
-Section1. 스프링과 표준프레임워크
-1.1. 프레임워크 개념
-1.1.1. 프레임워크와 아키텍처
-1.1.2. 프레임워크의 장점
-1.1.3. 자바 기반의 프레임워크와 특징
-1.2. 스프링과 표준프레임워크
-1.2.1. 스프링 프레임워크
-1.2.2. 스프링 프레임워크의 특징
-1.2.3. 스프링과 표준프레임워크
-Section2. 표준프레임워크 템플릿 프로젝트
-2.1. 표준프레임워크 템플릿 프로젝트 생성
new -> egovframe web project
project name : TemplateWeb , maven Settion Group id : com.rubypaper , Artifact id : TemplateWeb , version 1.0.0 -> sample source 체크 
run as 해보면 list Sampe 화면을 볼수 있다. 
프로젝트가 실행될때 , sampledb.sql 파일에 있는 sql 실행되어 데이터베이스에 SAMPLE 테이블이 자동으로 생성되고 데이터도 입력된다는 것 이다.
프로젝트에 사용되는 테이블은 메모리 테이블로 생성되기 때문에 삭제 , 수정해도 tomcat 을 재시작하면 다시 리셋되는걸 볼 수 있다.

-2.1.1. 웹 프로젝트 생성
-2.1.2. 웹 프로젝트 실행
-2.2. 표준프레임워크 템플릿 프로젝트 구조 분석
-2.2.1. 프레임워크 라이브러리
-2.2.2. src/main/java 소스 폴더
-2.2.3. src/main/resources 소스 폴더
-2.2.4. src/main/webapp 폴더

-CHAPTER 02 표준프레임워크 실행 환경 공통기반 레이어
-Section1. 스프링 IoC
-1.1. 스프링 컨테이너
-1.1.1. 프로젝트 생성
new -> egovframe web project
project name : SampleWeb , maven Settion Group id : com.rubypaper , Artifact id : SampleWeb , version 1.0.0 -> sample source 체크 하지 않음

-1.1.2. 빈 클래스 작성
SampleServiceImpl.java

-1.1.3. 스프링 설정 파일 작성
context-common.xml
에 위의 클래스 빈으로 등록

-1.1.4. 스프링 컨테이너 구동 및 테스트
SampleServiceClient.java

-1.1.5. 로그 출력하기
log4j2.xml

-1.1.6. 스프링 컨테이너의 종류
-1.2. 스프링 설정 파일
-1.2.1. 루트 엘리먼트와 네임스페이스
-1.2.2. 엘리먼트
-1.2.3. 엘리먼트 속성
-1.3. IoC를 이용한 비즈니스 컴포넌트
-1.3.1. 비즈니스 클래스 변경
-1.3.2. 다형성 적용하기
-Section2. 의존성 주입
-2.1. 의존성 주입 기초
-2.1.1. 스프링의 의존성 관리
-2.1.2. 의존 관계 277
-2.2. 생성자 인젝션 280
-2.2.1. 생성자 인젝션 설정
-2.2.2. 의존 관계 변경
-2.2.3. 다형성 적용하기
-2.2.4. 다중 변수 매핑
-2.3. 세터 인젝션
-2.3.1. 세터 인젝션 기본
-2.3.2. P 네임스페이스 사용하기
-2.3.3. 컬렉션 인젝션
-Section3. 어노테이션 기반 설정
-3.1. 어노테이션 설정 기본
-3.1.1. Context 네임스페이스 추가
-3.1.2. 컴포넌트 스캔
-3.1.3. @Component 어노테이션
-3.1.4. @Compoent 어노테이션 확장
-3.2. 어노테이션을 이용한 의존성 주입
-3.2.1. 의존성 주입 어노테이션
-3.2.2. @Resource 어노테이션의 name 속성 사용하기
-3.2.3. 어노테이션과 XML 병행하여 사용하기
-Section4. 데이터베이스 연동
-4.1. JDBC 기반의 데이터베이스 연동
-4.1.1. 드라이버 추가
-4.1.2. 테이블 생성 및 SQL 테스트
-4.1.3. VO 클래스 만들기
-4.1.4. VO 클래스 적용하기
-4.1.5. DAO 클래스 구현
-4.2. 스프링 JDBC 적용
-4.2.1. 스프링 JDBC
-4.2.2. 스프링 JDBC 설정
-4.2.3. JdbcTemplate 메소드
-4.2.4. DAO 클래스 구현
-Section5. 스프링 AOP
-5.1. AOP 개요
-5.1.1. 스프링 AOP 설정
-5.2. AOP 용어 및 기본 설정
-5.2.1. AOP 용어 정리
-5.2.2. AOP 설정 기본
-5.2.3. 포인트컷 표현식
-5.2.4. 어드바이스 동작 시점
-5.2.5. JoinPoint와 바인드 변수
-Section6. 실행환경 공통 기능
-6.1. 예외 처리
-6.1.1. 예외 전용 스프링 설정 파일 추가
-6.1.2. 예외 처리 테스트
-6.2. 트랜잭션 처리
-6.2.1. 트랜잭션 전용 스프링 설정 파일 추가
-6.2.2. 트랜잭션 관리자 등록
-6.2.3. 트랜잭션 어드바이스 등록
-6.2.4. AOP 설정을 통한 트랜잭션 적용
-6.2.5. 트랜잭션 설정 테스트
-6.3. 아이디 제너레이션
-6.3.1. 테이블 수정 및 생성
-6.3.2. 아이디 제너레이션 서비스 설정
-6.3.3. 아이디 제너레이션 적용
-6.4. 로깅 처리
-6.4.1. 로깅 서비스 개요
-6.4.2. 로그 레벨 변경 및 테스트

-CHAPTER 03 표준프레임워크 실행 환경 화면처리 레이어
-Section1. 스프링 MVC
-1.1. Model1 아키텍처
-1.1.1. Model1 아키텍처
-1.1.2. 인덱스 페이지 만들기
-1.1.3. 웹 프로젝트 실행
-1.1.4. 목록 기능 구현하기
-1.1.5. 상세 기능 구현
-1.1.6. 등록 기능 구현
-1.1.7. 수정 기능 구현
-1.1.8. 삭제 기능 구현
-1.2. 스프링 MVC 설정
-1.2.1. Model2 아키텍쳐
-1.2.2. DispatcherServlet 등록
-1.2.3. 스프링 설정 파일
-1.2.4. 인코딩 설정
-1.3. 스프링 MVC 적용
-1.3.1. 목록 기능 개발
-1.3.2. 상세 조회 기능 구현
-1.3.3. 등록 구현하기
-1.3.4. 수정 기능 구현
-1.3.5. 삭제 기능 구현
-1.3.6. ViewResolver 활용하기
-Section2. 어노테이션을 이용한 스프링 MVC 개발
-2.1. 어노테이션 기반의 컨트롤러 구현
-2.1.1. 추가하기
-2.1.2. 컨트롤러를 POJO로 만들기
-2.1.3. 어노테이션 적용하기
-2.1.4. 클라이언트 요청 처리
-2.2. 어노테이션 기반의 스프링 MVC 구현
-2.2.1. 등록 기능 구현
-2.2.2. 목록 검색 기능 구현
-2.2.3. 상세 기능 구현
-2.2.4. 수정/삭제 기능 구현하기
-2.2.5. 컨트롤러 통합하기
-2.2.6. 요청 방식에 따른 처리
-2.2.7. JSP에서 Command 객체 사용하기
-2.2.8. Controller 메소드 리턴타입
-2.3. 기타 어노테이션
-2.3.1. @RequestParam 어노테이션
-2.3.2. @ModelAttribute 어노테이션
-2.3.3. @SessionAttribute 어노테이션 사용하기
-2.4. 프레젠테이션 레이어와 비즈니스 레이어 통합하기
-2.4.1. 표준프레임워크 아키텍처
-2.4.2. Controller에서 컴포넌트 인터페이스 사용하기
-2.4.3. 비즈니스 컴포넌트 의존성 주입하기
-2.4.4. 리스너를 등록하여 비즈니스 컴포넌트 호출
-2.4.5. 컨테이너들의 관계 정리
-2.5. 추가 기능(검색, 예외처리, 다국어) 구현
-2.5.1. 검색 기능 구현하기
-2.5.2. 예외 처리
-2.5.3. 다국어 처리

-CHAPTER 04 표준프레임워크 실행 환경 데이터처리 레이어
-Section1. iBATIS 프레임워크 적용
-1.1. iBATIS 프레임워크 적용하기
-1.1.1. iBATIS 프레임워크 특징
-1.1.2. SqlMap XML 파일 만들기
-1.1.3. iBATIS 메인 환경설정 파일 작성하기
-1.1.4. 스프링과 iBATIS 연동 설정
-1.1.5. DAO 클래스 구현
-1.1.6. DAO 변경 및 실행 결과 확인
-1.2. SqlMap XML 설정 문법
-1.2.1. iBATIS 구조
-1.2.2. SqlMap XML 파일
-1.2.3. SqlMap 속성
-1.2.4. CDATA Section 사용
-1.3. iBATIS JAVA API
-1.3.1. SqlMapClient 객체
-1.3.2. EgovAbstractDAO 클래스
-1.4. 동적 쿼리
-1.4.1. 동적 쿼리 개요
-1.4.2. 동적 쿼리 적용
-1.4.3. 동적 엘리먼트
-Section2. MyBatis 프레임워크 적용
-2.1. MyBatis 프레임워크 연동
-2.1.1. 메인 환경설정 파일 만들기
-2.1.2. SQL Mapper 파일 만들기
-2.1.3. 스프링 설정 추가하기
-2.1.4. DAO 클래스 구현(방법 1)
-2.1.5. DAO 클래스 구현(방법 2)
-2.2. SQL Mapper 문법 및 동적 쿼리 적용
-2.2.1. Mapper XML 구조
-2.2.2. Mapper XML 엘리먼트
-2.2.3. 동적 쿼리로 검색 처리

-CHAPTER 05 공통 컴포넌트
-Section1. 공통 컴포넌트 개념
-Section2. 공통 컴포넌트 구성
-Section3. 공통 컴포넌트 실습
-3.1. 공통 컴포넌트 아키텍처
-3.2. 공통 컴포넌트 추가
-3.3. 메이븐 에러 해결 방법
-3.4. 서버 에러 해결 방법
-3.5. 공통 컴포넌트 실행